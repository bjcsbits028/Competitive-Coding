<snippet>
	<content><![CDATA[
const int MAXN = 5e3 + 3;
long long p1 = 997 , p2 = 449 ;
long long MOD1 = 99999989 , MOD2 = 9999991 ;
long long FH[MAXN] , BH[MAXN] ;
long long pp1[MAXN] ; 
long long ipp1[MAXN] ; 
string s,sr ;
void hashf(string &s){
    long long x = 1 ;
    FH[0] = (s[0] - 'a')%MOD1 ;
    x = p1%MOD1 ;
    for(int i = 1 ; i < s.length() ; i++){
        FH[i] = FH[i-1] + (x*(s[i] - 'a'))%MOD1 ;
        x = (x*p1)%MOD1 ;
    }
}
long long F1(long long r){
    if(r < 0)
        return 0 ;
    return FH[r] ;
}
long long get_hashf(int l,int r){
    l-- ; r-- ;
    long long ans = (F1(r) - F1(l-1) + MOD1)%MOD1 ;
    ans = (ans * ipp1[l])%MOD1 ;
    return ans ;
}
void hashb(string &s){
    long long x = 1 ;
    BH[0] = (s[0] - 'a')%MOD1 ;
    x = p1%MOD1 ;
    for(int i = 1 ; i < s.length() ; i++){
        BH[i] = BH[i-1] + (x*(s[i] - 'a'))%MOD1 ;
        x = (x*p1)%MOD1 ;
    }
}
long long F2(int r){
    if(r < 0)
        return 0 ;
    return BH[r] ;
}
long long get_hashb(int l,int r){
    int n = s.length() ;
    l-- ;
    r-- ;
    l = n - 1 - l ;
    r = n - 1 - r ;
    // cout << "( " << l << " , " << r << " )\n" ;
    long long ans = (F2(l) - F2(r-1) + MOD1)%MOD1 ;
    ans = (ans*ipp1[r])%MOD1 ;
    return ans ;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>hashfunction</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
